# 系统配置
## Info: 终端中正常为 awk '' 但是在alias中就只能写成 awk "", 而且需要对 $ 和 " 转义

#############################################################
### 通用别名
#############################################################

# 基础命令简化
alias o='xdg-open' # 通过文件类型绑定的默认应用程序打开文件
alias pa='ps auxf' # 所有进程
alias pa.user='ps uxf' # 当前用户的进程
alias kk='kill -9'
alias rmr='rm -rf'

alias l='ls -lFh' # ls -l 简写
alias lc='ls -l | wc -l'
alias lt='ls -lFh --sort=t' # ls -lFh --sort=t
alias la='ls -lFAh' # ls -a 简写
alias ll='ls -Fh' # ls -Fh
alias lla='ls -FAh' # ls -A
alias lfil='ls -lR|grep "^-"|wc -l' #统计文件夹下文件个数
alias ldil='ls -lR|grep "^d"|wc -l' #统计文件夹下文件夹个数

alias ..='cd ..' # cd .. 简写
alias ...='cd ../../' # cd ../../
alias cds='cd $(fd ".*" -t d | sk)'


alias dfh='df -h'
alias kdu='du -sh' # du -sh 
alias kdu.sort='du -h --exclude .git --exclude .svn | sort -hr | less' # 忽略VCS文件
alias kdu.sort.all='du -h | sort -hr | less' # 按文件占用大小排序
alias kdu.max='du -hx * | sort -hr | head -n 100 | le' # 获取当前目录最大的目录或文件
alias kdu.max.all='du -hx * | sort -hr | le' 
alias kdu.disk='du -xh / |grep "^\S*[0-9\.]\+G"| sort -hr' # 硬盘占用Gib以上目录

alias le='less -R' # less -R
alias les='less -R -S'
alias len='less -N -R' # less -N -R
alias lens='less -N -R -S ' # less -N -R -S
alias le.s='less $(fd ".*" -t f | sk)'
alias le.ss='less -S $(fd ".*" -t f | sk)'
alias le.sn='less -S -N $(fd ".*" -t f | sk)'
alias mpp='mkdir -p'

alias his='history | less'
alias sudo='sudo ' #sudo别名,方便运行别名
alias kap='___kap(){ if test $# = 2; then echo "$2" >> $1; fi}; ___kap' # append content $2 to $1 file
alias lf='___if(){ name=$1; location=$(which $name); ls -l "$location"; }; ___if'
alias ppid='ps -o ppid= -p' # find parent pid  of target pid

## Net
alias kip='nc -v -z -n' # 指定 ip port 是否开放
alias kdp='nc -v -z' # 指定 domain port 是否开放
alias kip.where='___kipwhere(){
    curl http://www.cip.cc/$1
}; ___kipwhere'
alias kli='ip addr | grep -v inet6 | grep inet | grep brd' # list ip
alias klp='lsof -Pni' # list port
alias klp.close='klp | grep CLOSE_WAIT'
alias klp.established='klp | grep ESTABLISHED'
alias klp.listen='klp | grep LISTEN'
alias kdns='dig +tcp @223.6.6.6' # 使用阿里云DNS 做域名解析
alias kport='nmap -sT ' # namp -sT 
alias fut='fuser -v -n tcp' # fuser 本地 tcp端口开放
alias fuu='fuser -v -n udp' # fuser 本地 udp端口
alias klp.listen.port='klp | grep LISTEN | kp.extract : "\(LIS" | sort -n'

## Aplication
alias hh='htop' # htop
alias gy='groovy' # groovy简写
alias py='python3' # python3 简写
alias py2='python2' # python2 简写
alias py.env='source env/bin/activate' # 进入虚拟环境
alias pj='pretty-json'
alias yay='/usr/bin/yay --color=always'
alias rr='ranger'
alias cm='recycle-bin'
alias cmg='recycle-bin -g | xargs less'
alias cmf='recycle-bin -f | xargs less'
alias codiff='code --diff'
alias lg='lazygit'
alias mdf='md-formatter'
alias sys-moni='(GTK_THEME=vimix-dark-compact-ruby gnome-system-monitor >/dev/null 2>&1 &)'

alias dsort='sort -hr' # 反排序


## 时间
alias now='date "+%F %T %A"' # 当前日期时间 date "+%F %T %A"
alias now.deserialize='date --date=@\'
alias now.seconds='date +%s'
alias now.cp='date "+%F %T" | xargs printf "%s %s\n" | xclip -selection clipboard' # 复制当前日期时间
alias now.cpt='date "+%F %T" | xargs printf "## %s %s\n" | xclip -selection clipboard' # 复制当前日期时间标题
alias now.cpw='date -d "+"$(expr 7 - $(date +%u))" days" "+第%V周 %F" | xargs printf "## %s %s\n" | xclip -selection clipboard' # 复制周总结标题： 第x周 周日的日期
alias now.d='date +%Y%m%d' # 年月日
alias now.dt='date "+%F_%T"' # 年月日
alias now.t='date +%H%M%S' # 时分秒
alias now.ds='date "+%Y%m%d_%H%M%S"'
alias now.l='____tmp_time=$(now.seconds)'
alias now.r='expr $(now.seconds) - $____tmp_time'

alias krep='echo "USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND" && ps aux | grep -E -v "grep" | grep -i' # 查询进程
alias ksum.me='grep -v grep | awk "{sum+=\$6};END {print sum \"K \" sum/1024\"M \"}"' # 与 krep 组合 示例: krep java | ksum.me
alias kstat='ps aux | grep -v RSS | awk "{print \$6 \"\\t\" \$6/1024\"M\" \"\\t\" \$2 \"\\t\" \$11 }" | dsort | less' # 按内存使用量对进程排序
alias trep='tree | grep -i' # tree | grep -i
alias fs='find . -iname' # find . -iname
alias ff='find . -type f'

alias knet.stat='netstat -an|awk "/tcp/ {print \$6}"|sort -hr|uniq -c | sort -hr'

alias kinstallfont='cp *.ttf *.otf ~/.local/share/fonts/ && fc-cache -vf ~/.local/share/fonts/'

___doc_cron(){
echo "\033[0;31m┌────────────────── seconds      \033[0;0m (0 - 59) Just Spring Cron, Linux crontab not contain this field"
echo "\033[0;31m│  \033[0;33m┌─────────────── minute       \033[0;0m (0 - 59)"
echo "\033[0;31m│  \033[0;33m│  \033[0;32m┌──────────── hour         \033[0;0m (0 - 23)"
echo "\033[0;31m│  \033[0;33m│  \033[0;32m│  \033[0;36m┌───────── day of month \033[0;0m (1 - 31)"
echo "\033[0;31m│  \033[0;33m│  \033[0;32m│  \033[0;36m│  \033[0;34m┌────── month        \033[0;0m (1 - 12) OR (jan,feb,mar,apr ...)"
echo "\033[0;31m│  \033[0;33m│  \033[0;32m│  \033[0;36m│  \033[0;34m│  \033[0;35m┌─── day of week  \033[0;0m (1 - 6, Sunday: 0 OR 7) OR (sun,mon,tue,wed,thu,fri,sat)"
echo "\033[0;31m│  \033[0;33m│  \033[0;32m│  \033[0;36m│  \033[0;34m│  \033[0;35m│     "
echo "\033[0;31m*  \033[0;33m*  \033[0;32m*  \033[0;36m*  \033[0;34m*  \033[0;35m*    \033[0;0mcommand"  
}
alias kdoc.cron='___doc_cron'

___doc_color(){
    for i in {0..255} ; do
        printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
        if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
            printf "\n";
        fi
    done
}
alias kdoc.color='___doc_color'

## 管道 Pipe
alias kp.crlf='xargs sed -i "s/\r//g"' # crlf -> lf
alias kp.count='sort | uniq -c | sort -hr' # 去重累计排序
alias kp.sum='awk "{sum += \$1};END {print sum}"'
alias kp.copy='xclip -selection clipboard'
alias kp.sort='sort -hr'
alias kp.extract='___kp_extract'
___kp_extract(){
    if (( $# < 2 )); then 
        echo 'Error: param miss, must have 2 param'
        return
    fi 
    start="$1"
    end="$2"
    grep -oP "(?<=$start).*(?=$end)"
}

#############################################################
### 专有别名
#############################################################

alias apt.rm='sudo apt remove --purge' # 完全卸载软件

alias pac.mirror='sudo pacman-mirrors -c China'
alias pac.autorm='sudo pacman -Qtdq | sudo pacman -Rns -' # 卸载未被依赖的包
alias pac.rm='sudo pacman -Rs' # 卸载以及其依赖包
alias pac.up='sudo pacman -Syyu'


alias https='http —default-scheme=https' # httpie 的https方式
alias k.todo='ag "\- \[ \] | TODO"' # find all todo 

alias tt='textadept' # textadept简写
alias ged='gedit' # gedit 简写
alias typ='typora' # typora 简写
alias fm='(dde-file-manager . &) >/dev/null 2>&1' # dde-file-manager
alias na='(nautilus . &) >/dev/null 2>&1' # nautilus
alias dol='(dolphin . &) >/dev/null 2>&1' # dolphin
alias thu='(thunar . &) >/dev/null 2>&1' # thunar
alias synap='(synapse . &) >/dev/null 2>&1' # synapse
alias wcola='(cola &) >/dev/null 2>&1 ' # cola
alias aol='(qgit &) >/dev/null 2>&1' # qgit
alias ao='wcola' # cola
alias ai='(gitahead &) >/dev/null 2>&1' # yay gitahead-bin 
alias dcola='(git-dag &) >/dev/null 2>&1' # git-dag
alias Krec='asciinema rec' # 开始录制终端
alias ngr='sudo nginx -s reload'
alias jvm='(visualvm&)'

## tmux
alias t='tmux'
alias ta='tmux a -t' # tmux a -t 
alias tn='tmux new -s'

# sudo echo 不起作用, 只能在root下执行
alias kcache.page='sync  && echo 1 > /proc/sys/vm/drop_caches'
alias kcache.inode='sync && echo 2 > /proc/sys/vm/drop_caches'
alias kcache.slab='sync  && echo 3 > /proc/sys/vm/drop_caches'

## 服务
alias S.net='sudo /etc/init.d/networking restart' # 网络重启

## Java
alias ja='java -jar' # java -jar
alias javav='java -version'
alias java.vmopt='java -XX:+PrintFlagsFinal -version'
___java_dir(){
    mkdir -p src/main/java;
    mkdir -p src/test/java;
    mkdir -p src/main/resources;
    mkdir -p src/test/resources;
}
alias java.dir='___java_dir' # 项目根目录下创建好目录结构
alias java.package='mkdir -p src/main/java/com/github/kuangcp' # 创建Maven项目包结构
alias java.dump='jmap -dump:live,format=b,file=heapLive.hprof' # dump a java process
alias kj='bash $SCRIPT/shell/assistant/java-tool.sh' # java tool
alias arthas.install='curl -O https://arthas.aliyun.com/arthas-boot.jar' # arthas start
alias arthas.trace='trace com.arthas.Main run --skipJDKMethod false' # artahs trace with jdk
alias arthas.cp='printf " --skipJDKMethod false"| xclip -sel clip'

alias mvn.c='mvn clean'
alias mvn.cd='mvn clean deploy -U -DskipTests=true'
# alias mvn.cdt='mvn clean deploy -U -DskipTests=true'
alias mvn.cp='mvn clean package -U -DskipTests=true'
alias mvn.cc='mvn clean compile -U -DskipTests=true'
alias mvn.ci='mvn clean install -U -DskipTests=true'
alias mvn.dep='mvn dependency:tree'

alias mvn.version.replace='__mvnrelease(){gls | grep pom | xargs sed -i "s/$1/$2/1"};__mvnrelease' # 更改版本号 
___mvn_release(){ 
    case $1 in
        *-SNAPSHOT)  version=${1%-SNAPSHOT*}"-RELEASE"; ;;
        *-RELEASE) version=${1%-RELEASE*}"-SNAPSHOT"; ;; 
    esac; 
    if test -n "$version";then 
        echo $version; git ls-files | grep pom | xargs sed -i "s/$1/$version/1"; 
    fi; 
}
alias mvn.version.release='___mvn_release' # 更改版本号为 RELEASE

alias ge='gradle'
alias ge.cb='gradle clean build -x test'

## Golang 
alias gor='go run'
alias gorc='go run .'
alias got.b='go test -bench=. -benchmem'
alias gob.linux='CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build' # 禁用CGO 静态编译
alias gob.mac='CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build'
alias gob.win='CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build'
alias gob.winui='CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-s -w -H=windowsgui"'
___gob(){
    cur=$(pwd)
    dir=${cur##*/}
    echo $dir.bin
    go build -o $dir.bin
}
alias gob='___gob'

___goiver(){
    cur=$(pwd)
    dir=${cur##*/}
    lastCommit=$(git rev-parse HEAD | cut -c 1-7)
    now=$(date "+%Y%m%d.%H%M%S")
    go install -ldflags "-X main.buildVersion=$now.$lastCommit"
}
alias goi.ver='___goiver'

___gobver(){
    cur=$(pwd)
    dir=${cur##*/}
    lastCommit=$(git rev-parse HEAD | cut -c 1-7)
    now=$(date "+%Y%m%d.%H%M%S")
    go build -ldflags "-X main.buildVersion=$now.$lastCommit" -o $dir.bin
}
alias gob.ver='___gobver'

___gobr(){
    cur=$(pwd)
    dir=${cur##*/}
    go build -o $dir.bin
    ./$dir.bin
}
alias gobr='___gobr'
alias run.clean='krm -as bin'

alias gom='go mod'
alias gomt='go mod tidy'
alias gom.why='x=$(go mod graph | sed "s/@.*//g" | sort -nr | uniq | sk) && go mod why ${x#* }' # 包含子模块依赖

## pprof

alias gop.alloc='go tool pprof -alloc_space http://127.0.0.1:8899/debug/pprof/heap'
alias gop.use='go tool pprof -inuse_space http://127.0.0.1:8899/debug/pprof/heap'
alias gop.profile='go tool pprof -raw "http://127.0.0.1:8899/debug/pprof/profile?seconds=20"'
alias gop.profile.web='go tool pprof -http=: ' # profile得到的文件

#############

# Color 
color_red='\033[0;31m' # red
color_green='\033[0;32m' # green 
color_yellow='\033[0;33m' # yellow
color_blue='\033[0;34m' # blue
color_purple='\033[0;35m' # purple
color_cyan='\033[0;36m' # cyan
color_white='\033[0;37m' # white   
color_default='\033[0m' # default

# Docker
alias da='docker attach' # docker attach Ctrl p q 才能不影响容器退出
alias dt='docker tag' # docker tag
alias dl='docker pull' # docker pull
alias dp='docker ps --format "table {{.ID}}  {{.Names}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}\t{{.Command}}\t{{.Ports}}"'
alias dps='docker ps -a --format "table {{.ID}}  {{.Names}}\t{{.Image}}\t{{.CreatedAt}}\t{{.Command}}\t{{.Status}}"' # format docker ps
# 原命令： docker inspect --format="{{.Name}} {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $(docker ps -aq) | awk '{printf("%20s : \033[0;32m%8s\033[0m\n",$1,$2)}'
alias dpi='docker inspect --format="{{.Name}} {{.Id}} {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $(docker ps -aq) | awk "{printf(\"  %12.12s %-20s : \\033[0;32m%8s\\033[0m\n\",\$2,\$1,\$3)}"'
alias dpf='docker ps -a --format "table {{.ID}}  {{.Names}}\t{{.Size}}\t{{.Mounts}}"' # size 

alias drm='docker rm' # docker rm 
alias drmf='docer rm -f ' # docker rm -f
alias drmi='docker rmi ' # docker rmi
___drmi_none(){ 
    data=$(dim | grep -E "^<none>.*<none>");
    num=$(echo "$data"|wc -l);
    if test $num -le 1; then 
        return; 
    else 
        echo $num; 
    fi;
    echo "$data" | awk "{print $3}" | xargs docker rmi 
}
alias drmi.none='___drmi_none' # 删除未使用的镜像

___drmi_reg(){
    pa=$1
    list=$(dim | awk '{print $1":"$2}' | grep "$pa")
    echo $list
    printf "\033[0;31mDelete all? \033[0m y/n: "
    read answer;
    if test $answer = "y"; then 
        dim | awk '{print $1":"$2}' | grep "$pa" | xargs docker rmi  
    fi;
}
alias drmi.reg='___drmi_reg'

alias dim='docker images' # docker images
alias dim.ex='___dimex(){
    filename=${1##*/}    
    docker save -o $filename.tar $1 && zip $filename.zip $filename.tar
    };
___dimex'
alias dim.s='sh $SCRIPT/shell/base/docker-tool.sh' # Docker工具

alias dstat='docker stats' # docker stats
alias dstatn='docker stats --no-stream' # docker stat --no-stream
alias don='docker start' # docker start
alias doni='docker start -i' # 交互式启动
alias dres='docker restart' # docker restart
alias doff='docker stop' # docker stop
alias dexec='docker exec -it' # docker exec -it
alias dport='docker port' # docker port

## docker-compose
alias dco='docker-compose'
alias dco.up='dco up'
alias dco.down='dco down'
alias dco.on='dco start'
alias dco.off='dco stop'
alias dco.res='dco stop && dco start'

# 问题
alias P.init='synapse'
alias P.bell='sudo rmmod pcspkr' # 临时关闭终端响铃 或者 xset -b
alias P.fcitx='fcitx-autostart &' # 先把fcitx杀掉,然后跑这个,或者直接跑这个
alias P.gradle='gradle --stop' # 杀掉Gadle守护进程
alias Ps='sudo swapoff -a && sudo swapon -a' # 重置交换分区
alias P.time='sudo /usr/sbin/ntpdate -u cn.pool.ntp.org' # 同步时间
alias P.xfce.wm='killall xfwm4'
alias P.docker='sudo groupadd docker; sudo gpasswd -a $USER docker' # 当前用户添加到Docker用户组
alias P.jetbrain='cd ~/.config/JetBrains/ && kf f evaluation.key | xargs rm -f' # 重置JetBrain使用时间

# Media
___m_audio(){ 
    if test -z "$*"; then 
        echo 'Error: no audio file'; 
    else 
        for i in $*; do 
            ffmpeg -i $i -vn -y -acodec copy ${i%\.*}.m4a; 
        done; 
    fi 
}
alias M.audio='___m_audio'

alias km.ts='bash $SCRIPT/shell/media/mergets.sh'
___m_merge_ts(){
    ts_filename=$(date "+%Y%m%d-%H%M%S"); 
    for file in $(ls | grep -v m3u8| sort -h); do 
        echo $file;
        cat $file >> $ts_filename.mp4;
    done
}
alias M.ts_to_mp4='___m_merge_ts'

#############################
# Git 
#############################

## add 
alias ga='git add -A && git status' # git add -A && git status
alias gs.log='gitstats . bin && cd bin && kserver' 
alias gaf='git add' # git add
alias gau='git add -u' # 只添加修改的文件
alias gad.add='gs -s | grep "^??" | awk "{print \$2}"  | xargs git add' # 只添加新增的文件

## clone 
alias gcl='git clone --depth 1' # git clone --depth 1
alias gcl.patch='git remote set-branches origin "*" && git pull'
alias gcls='git clone' # git clone
alias gclr='git clone --recursive' # clone with submodules

alias gln='git pull --no-ff' # merge --no-ff

alias gr='git reset' # git reset 
alias gr.lc='git reset --soft HEAD^' # git reset --soft HEAD^ 撤销上次提交

alias grm='git remote' # git remote
alias gv='git remote -v' # git remote -v
alias glm='git ls-remote' # git ls-remote
alias glm.b='glm  | cut -f 2 |sort -nr | le' # 分支排序

alias gs='git status' # git status 
alias gs.in='git status -s | grep -e "^[MADRC]" | xargs printf "%s\n" |  grep -e "^[^MADRC]"'
alias gt='git tag' # git tag
alias gtl='git tag -l'
alias gta='git tag -a'
alias gtlr='git tag -l | grep '

## branch 
alias gb='git branch'
alias gb.merged='git branch --merged'
alias gb.no-merged='git branch --no-merged'
alias gb.c='gb --show-current'
alias gb.cp='gb.c | xargs printf | xclip -sel clip'
alias gb.commit.cp='git log --oneline | head -n 1 | awk "{print \$1}" | xclip -sel clip'
___gb_cn(){
    gb --contains $1 --all | sed 's/.*\///g'
}
alias gb.commit_branch='___gb_cn' # commit 找branch
alias gbd='git branch -d'
alias gbD='git branch -D'
___gbD_regex(){
    count=$(git branch | grep -E "$1" | wc -l);
    if test $count -gt 0; then 
        git branch | grep -E "$1"; 
        printf "  delete following branch (y/n): "; 
        read answer; 
        if test $answer = "y"; then 
            git branch | grep -E "$1" | xargs git branch -D;
        fi; 
    else
        echo "not match any branch." ; 
    fi;
}
alias gbD.regex='___gbD_regex'
alias gbe='gb --edit-description' # edit current branch description
alias gbp='git config branch.$(gb.c).description' # print current branch description
___gbi(){
    kwd=$1
    cur=$(gb.c)
    for i in $(git rev-parse --symbolic --branches | grep "$1"); do
        if test $i = $cur; then 
            de=$(git config branch.$cur.description | sed "s/^/      /g")
            printf "*$color_green %s \n$color_yellow%s$color_default\n" $cur "$de"
            continue
        fi 
        
        de=$(git config branch.$i.description | head -n 1)
        if test -z "$de"; then 
            printf "  %s $color_yellow%s$color_default\n" $i " "
        else 
            printf "  %s $color_yellow%s$color_default\n" $i "$de"
        fi 
    done
}
alias gbi='___gbi'
alias gbvv='git branch -vv' # git branch -vv
alias gbsup='git branch --set-upstream-to=origin/$(gb.c)'

___gbmer(){
    echo " "
    __regex=$1;
    __branch_num=$(gb | grep -i -e "$__regex" | grep -v "*" | wc -l);
    if test $__branch_num -le 1; then 
        if test $__branch_num = 0;  then 
            printf "branch $color_red $__regex $color_default not exist\n";
        fi;
        __branch=$(gb | grep -i -e "$__regex" | grep -v "*" | sed -n 1p | awk "{print \$1}");
        git merge --no-ff $__branch; 
    else  
        gb | grep -i -e "$__regex" | grep -v "*" | awk "{printf(\"  $color_green%2s$color_default %s\n\", NR, \$1);}"; 
        printf "\n Select which one: ";
        read no;
        __branch=$(gb | grep -i -e "$__regex" | grep -v "*" | sed -n ${no}p | awk "{print \$1}");
        if test -n $__branch; then 
            git merge --no-ff $__branch; 
        fi; 
    fi;
}
alias gb.me='___gbmer' # merge branch with regex
alias gb.log='git log --oneline --decorate | grep "Merge branch" | sed "s/into.*//g" | sed "s/ Merge branch//g"' # merge log

assertParamCount(){
    if [ ! $1 = $2 ]; then
        echo 1
    else
        echo 0
    fi
}
___kwbranch(){
    if [ $(assertParamCount $# 2) = 1 ]; then echo 'Error: need input version and name'; return ; fi 
    now=$(date +%m%d)
    version=$1
    feat=$2
    finalBranch="feature/${now}_$1_$2"
    git branch $finalBranch
    echo $finalBranch
    printf $finalBranch | xclip -sel clip
}
alias gb.feat='___kwbranch'

___kwfixbranch(){
    if [ $(assertParamCount $# 2) = 1 ]; then echo 'Error: need input version and name'; return ; fi 
    now=$(date +%m%d)
    version=$1
    feat=$2
    finalBranch="hotfix/${now}_$1_$2"
    git branch $finalBranch
    echo $finalBranch
    printf $finalBranch | xclip -sel clip
}
alias gb.fix='___kwfixbranch'

alias gb.mb='ghl && gshp'

## config 
alias gcf='git config'
alias gcfl='git config --list'
alias gcfll='git config --local --list'

## submodule
alias gsb='git submodule'
alias gsb.init='git submodule update --init --recursive'

## commit 
alias gm='git commit -m' # git commit -m
alias gml='git commit -c ORIG_HEAD' # 使用上次提交(包括被reset)的信息进行提交
alias gam='git commit -am' # git commit -am
alias gmv='git commit -v' # git commit -v  查看更改,输入提交信息
alias gmw='___gmw' # pass time gmw '1. who 2. what'
___gmw(){
    msg=$1
    GIT_AUTHOR_DATE=$(date --date='-8 hour ago')  GIT_COMMITTER_DATE=$(date --date='-8 hour ago')  git commit -m "$msg"
}

alias gme='git merge --no-ff ' # git merge --no-ff 简写
alias gme.base='git merge-base $(gb.c)'
alias gmer='gfa && gme'
alias gmes='git merge --squash'
alias gme.branches='
__gmebranches(){
    if test "$1" = "h"; then
      echo "Usage:\n   gme.branches originBranch pattern "
      echo "   merge originBranch to each branch that matched pattern";
    fi;
    if test $# = 2; then 
        for branch in $(gb | grep -e "$2" ); do 
            gh $branch && git merge --no-ff $1;
            gp;
            ghl; 
        done; 
    fi
};
__gmebranches'
alias gmr='git rebase -i'

alias gl='git pull' # git pull
alias glr='git pull --rebase' # git pull --rebase

alias gp='git push' # git push
alias gpt='git push --tags'
alias gpal='git push --all' # git push --all
___gpoc(){ 
    remote="origin"; 
    if test -n "$1"; then 
        remote=$1;
    fi
    git push -u $remote $(gb.c); 
}
alias gpoc='___gpoc' # git push -u $remote currentBranch
# alias gpsup='git push --set-upstream origin $(gb.c)'
#alias gpob=' __gpob(){ remote="origin"; if test -n "$1"; then remote=$1; fi ; git remote set-branches $remote $(gb.c);  git fetch; }; __gpob' # 设置远程 track 本地分支
#alias gpoa='gpoc && gpob'
___gpd(){
    if test $# = 1; then
        git push origin --delete $1;
        return 0;
    fi
    if test $# = 2; then
        git push $1 --delete $2;
    fi
}
alias gpd='___gpd' # 删除远程分支 gpd origin fea/test
alias gpdt='__gpdt(){ if test $# = 2; then git push $1 --delete tag $2; fi; }; __gpdt' # 删除远程标签 gpdt origin v1.0

alias gd='git diff' # git diff [branch] file 从当前分支切换到目标分支的某文件的修改
alias gds='gd --compact-summary' # diff current with other branch 
alias gdc='git diff --cached' # git diff --cached
alias gdcs='gdc --compact-summary'
alias gdm='git diff master'

alias gd.patch='__gdpatch(){git diff > $1.patch};__gdpatch' # create patch

## Fetch 

alias gf.config='git config --get remote.origin.fetch'
alias gf.track.origin='git config --add remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"'

## patch
alias gpa.format='git format-patch' # eg: gpa.format -1 HEAD
alias gpa.format.last='git format-patch -1 HEAD' # eg: gpa.format -1 HEAD
alias gpa.apply='git am'

alias gh='git checkout' # git checkout
alias gh.d='git checkout --' # 撤销工作区变更
alias gh.m='git checkout master'
alias ghl='git checkout -' # git checkout - 
alias ghb='git checkout -b' # git checkout -b
___ghr(){
    echo " "
    __regex=$1;
    __branch_num=$(git rev-parse --symbolic --branches | grep -i -e "$__regex" | wc -l);
    if test $__branch_num -le 1; then 
        if test $__branch_num = 0;  then 
            printf "branch $color_red $__regex $color_default not exist\n";
        fi;
        __branch=$(git rev-parse --symbolic --branches | grep -i -e "$__regex" | sed -n 1p | awk "{print \$1}");
        gh $__branch; 
    else
        target=$(git rev-parse --symbolic --branches | grep -i -e "$__regex" | sk)
        gh $target 

        # gb | grep -i -e "$__regex" | grep -v "*" | awk "{printf(\"  $color_green%2s$color_default %s\n\", NR, \$1);}"; 
        # printf "\n Select which one: ";
        # read no;
        # __branch=$(gb | grep -i -e "$__regex" | grep -v "*" | sed -n ${no}p | awk "{print \$1}");
        # if test -n $__branch; then 
        #     gh $__branch; 
        # fi; 
    fi;
}
alias ghr='___ghr' # checkout with regex

alias gls='git ls-files' # git ls-files
alias gls.author='gls | grep \\.java  | xargs cat | grep "uthor " | kp.count' # java author
alias gls.large.commit='git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -40 | awk "{print\$1}"'
alias gls.large='git rev-list --objects --all | grep "$(gls.large.commit)"'
alias gls.line='git ls-files | xargs cat | wc -l' # 查看仓库中所有文本文件行数总和
___glogf(){
    files=($*);
    total=0; 
    for file in $files; do 
        temp=$(git ls-files | grep "$file" | xargs cat | wc -l); 
        total=$((total+temp)); 
        printf "%6s : %6s\n" $file $temp;  
    done
    printf "\n%6s : %6s\n" "Total" $total;
}
alias gls.file='___glogf' # eg: gls.file sh md java

___glog_files(){
    x=$(for f in $(git ls-files); do n=$(cat $f | wc -l); printf '%s %s\n' $n $f; done;)
    echo $x | sort -hr | less 
    unset x
}
alias gls.files='___glog_files'

alias gsw='git show'
alias gswb='git show-branch'

alias gco.add='printf "add line:"; gdc | grep -E "^\+{1}[^+]"|wc -l'
alias gco.del='printf "del line:"; gdc | grep -E "^-{1}[^-]"|wc -l'

## 统计 git log 
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glols='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --stat'

alias gcount='git log --author="$(git config --get user.name)" --pretty=tformat: --numstat \
| awk "{a+=\$1; b+=\$2; c+=\$1-\$2}; END {printf \"add: %s remove: %s total: %s\n\", a ,b ,c }"' # 统计更改行数


# glo glo. 等 git log 命令 都可以在末尾追加 master..feat/first 查看 feat/first 多出master的提交
alias glo='git log --graph --pretty=format:"%Cred%h%Creset %Cgreen%ad%Creset%C(yellow)%d%Creset %C(bold cyan)%an%Creset %s" \
 --abbrev-commit --date=format:"%F %T %a"' # 最常用 彩色输出
alias glo.master='glo master..$(gb.c)' # 当前分支和master差异提交
alias glo.='git log --oneline --decorate' # 最简单
alias glo.l='glo | head -n 1 | awk "{print \$1}"' # 最后一次提交的commitId
alias glog='git log --pretty=format:"%h %ad %s%d [%an]" --date=format:"%F %T %a"' # glog format own define
alias glogl='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%F %T"' # glog format own define

# log 分析
___glog_dir(){for s in $(ls -d */); do cd $s; c=$(git log --oneline .|wc -l); printf '%3d %-15s \n' $c $s; cd ..; done  | sort -n -r}
alias glog.dir='___glog_dir' # 目录提交次数

___glog_file(){
    git --no-pager log --format=format:'%h' --no-merges | awk '{system(" git --no-pager diff  --stat-name-width=300 --name-only "$1" "$1"~") }'
}
alias glog.file='___glog_file' # 所有文件的修改记录

___glog_search(){
git log --oneline -S "$*" --source --all
}
alias glog.search='___glog_search'

alias glogy='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%Y" | awk "{print \$2}" | uniq -c'
alias glogym='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%Y-%m" | awk "{print \$2}" | uniq -c'
alias glogt='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%H %M %S" | awk "{print \$2}" | kp.count'
alias glogtm='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%H %M %S" | awk "{print \$2 \$3}" | kp.count'
alias glogttm='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%H %M %S" | awk "{print \$2 \$3}" | colrm 4 | kp.count'
alias glogm='git log --pretty=format:"%h %ad | %s%d " --date=format:"%F %T" | grep -v origin | grep -v Merge \
| awk "{print \$5\" \"\$6\" \"\$7\" \"\$8\" \"\$9}" | kp.count | less'
alias glogau='git log --pretty=format:"%an" | kp.count' # 统计提交作者

alias kgt='bash $SCRIPT/shell/base/git-tool.sh'

## zsh 中 git 插件已包含
## alias gloga='git log --oneline --decorate --graph --all' # 简短彩色输出
## alias glol='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'
## alias glola='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --all'

## stash 
alias gsh='git stash' # git stash 
alias gshl='git stash list' # git stash list
alias gshk='git stash --keep-index' # stash 所有文件的修改 不包含文件的新增，但是保留index区文件状态
alias gsh.nk='git stash --no-keep-index' # stash 所有 文件的修改 
alias gsh.nku='git stash --no-keep-index -u' # stash 所有 文件的修改 和 文件的新增(untrack)
alias gsh.all=gsh.nku
___gshin(){ 
    index_count=$(gs.in | wc -l);
    if test -n $index_count; then 
        gs.in | xargs git stash push;
    fi
}
alias gsh.in='___gshin' # stash index区的内容 (无法缓存Delete动作)
alias gshu='git stash -u' # git stash  -u 
alias gshb='git stash branch' # git stash branch
alias gshd='git stash drop' # git stash drop 
alias gshp='git stash pop' # git stash pop 
alias gsha='git stash apply' # git stash apply
alias gshh='git stash push' # git stash list
alias gshs='git stash show' # git stash show
alias gsh.st='__gshst(){ index=$1; if test -z $index; then index=0; fi; git stash show -p stash@{$index} }; __gshst' # show 指定 stash index 的内容
___gshclA(){ 
    before=$(wip|wc -l);
    git stash --no-keep-index -u;
    after=$(wip|wc -l);
    if test $after -gt $before; then 
        gshd; 
    fi; 
}
alias gsh.cla='___gshclA' # 删除当前所有更改 gsh.cover 进行恢复
___gshcl(){ 
    before=$(wip|wc -l);
    git stash --no-keep-index;
    after=$(wip|wc -l); 
    if test $after -gt $before; then
        gshd;
    fi;
}
alias gsh.cl='___gshcl' # 删除当前所有更改 不包含未track文件比如新增文件 gsh.recover 进行恢复

___gshce(){
    count=$(gss | grep -E "$1" | wc -l); 
    if test -z $count ; then 
        return 0;
    else 
        git status -s | grep -E "$1" | awk "{print \$2}" | xargs git stash push; 
    fi
}
alias gsh.ce='___gshce' # stash 输入的 regex 匹配上的文件
alias wip='git stash list | grep $(gb.c)' #  查看当前分支是否有 stash 存在
alias gsh.recover='gitk --all $( git fsck --no-reflog | awk "/dangling commit/ {print \$3}" )'

## cherry pick
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'

###########################
# SVN
###########################

alias saf='svn add * --force' # 强制添加所有文件
alias sa='svn add' # svn add 
# alias sc='svn ci -m' # svn 提交, 不能就这样暴力提交
alias sp='svn up' # 下拉代码
## alias st='svn diff --diff-cmd "diff" -x "-q" . | grep Index | cut -d " " -f 2' # 类比 git status -s
alias slog='svn log | less' # 查看日志
alias st='svn st' # git status类似
alias scon='st | grep -E "^C"' # 冲突
alias sr='svn revert' # 恢复
alias sres='svn resolved' # 
alias sfo='svn info' # svn info
alias sdf='svn diff' # svn diff
alias scc='svn st | grep -E "^(C)|(D\s*C)"' # 查看冲突文件

################################################################
# Script 
# SCRIPT 环境变量定义在 custom 中

alias kg='dash $SCRIPT/shell/repository-tool.sh' # 检查所有仓库状态 Shell 实现并通过读取自定义aliases文件
alias kgo='bash $SCRIPT/shell/assistant/go-test.sh'
alias Kcsdn='py $SCRIPT/python/increase_readed.py' # increase 

alias kc='sh $SCRIPT/shell/assistant/cpp.sh' # 编译运行C文件辅助脚本
alias kpy.test='sh $SCRIPT/shell/assistant/python_unittest.sh' # 运行py单元测试辅助脚本

alias kcount='py $SCRIPT/python/tool/doc/count_char_zh.py' # 统计中文

alias Kdesktop='dash $SCRIPT/shell/text/deal_desktop.sh' # 创建一个desktop文件

alias kfs='bash $SCRIPT/shell/base/process-tool.sh' # 进程工具
alias kfsm='kfs -ms /Java /Vscode /Firefox /Chrome /Chromium visual-studio-code'
alias kfss='for file in /proc/*/status ; do awk "/VmSwap|Name/{printf \$2 \" \" \$3}END{ print \"\"}" $file; done | sort -k 2 -n -r | less' # 交换内存使用情况

alias kf='sh $SCRIPT/shell/base/file-tool.sh' # 文件路径工具
alias kfe='kf e' # 解压文件
alias kf.s='nc -l -v -p' # 服务端接收文件 eg: nc -l -v -p port > test.log
alias kf.c='nc -n -v ' # 客户端发送文件 eg: nc -v -n host port < test.log
# ___kfc(){ 
#     p_num=$#;
#     case $p_num in 
#         2) 
#             echo $1 $2; nc -v -n $1 9009 < $2; ;; 
#         3) 
#             nc -v -n $1 $2 < $3; ;; 
#         *) 
#             echo "invalid param"; ;; 
#     esac; 
# }
# alias kf.c='___kfc'
alias kf.java='kf f \.java | xargs cat | wc -l' # 统计 java 行数

___kff(){
    find . -xtype f > /tmp/mythos_find_tmp
    for i in $(cat /tmp/mythos_find_tmp); do
        printf '* \033[0;32m %s \033[0m\n' $i 
        cat $i | grep "$*"
    done 
}
alias kf.f='___kff'
alias krm='bash $SCRIPT/shell/base/recycle-bin.sh' # 回收站工具 bash
alias kh='bash $SCRIPT/shell/sdk/mythsdk.sh' # sdk工具
alias K.h='bash $SCRIPT/shell/base/show_alias_help.sh' # alias展示
alias krd='bash $SCRIPT/shell/text/refresh_index.sh' # 读md
alias kproto='bash $SCRIPT/shell/text/read_protoc.sh' # protoc
alias km='sh $SCRIPT/shell/base/ShowReadme.sh' # readme 查看


## Python
# alias kee='sh $SCRIPT/python/tool/key/anaiysis.sh' # 分析按键
# alias kee.key='kee -d | sort| awk "{print \$2};" | grep -E "^[A-Z]{1,1}$" | xargs echo | less' # 按顺序列出按键
# alias kee.key.small='kee.key | xargs printf "\033[0;32m%s\033[0;0m"' # 缩略
alias kee='__kee(){ day=$1; if test -z $day; then day=1 fi;  keylogger -R -t $day | less }; __kee'
# alias keb='(keylogger -b &)'
alias keb='(keylogger-gui &)'

alias kees='keylogger -S -v -d'
alias krecord='sh $SCRIPT/python/tool/key/record.sh' # 记录脚本
#alias kdns='py $SCRIPT/python/tool/switch-host-group/app.py' # 切换 hosts group

alias kmaven.dp='py $SCRIPT/python/java/maven/analysis_dependency.py' # 分析 Maven 依赖 提示可能的冲突


alias start_proc='___start_proc'
___start_proc(){
    cmd=$1
    cmd_count=$(ps aux | grep $cmd | grep -v grep | wc -l)
    if [ $cmd_count -gt 0 ]; then 
        return 
    fi 

    $cmd &
}

# TODO 超过后定时通知，kill 进程
___find_oom_proc(){
for proc in $(find /proc -maxdepth 1 -regex '/proc/[0-9]+'); do
    printf "%2d %5d %s\n" \
        "$(cat $proc/oom_score)" \
        "$(basename $proc)" \
        "$(cat $proc/cmdline | tr '\0' ' ' | head -c 50)"
#done 2>/dev/null | sort -nr | head -n 10
done 2>/dev/null | sort -nr
}
alias find_oom_proc='___find_oom_proc'


