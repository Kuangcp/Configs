# 系统配置
## Info: 终端中正常命令 awk '' , 在 alias中就只能写成 awk "", 而且 $ 需要转义

#############################################################
### 通用别名
#############################################################

# 基础命令简化
alias pa='ps auxf' # 所有进程
alias pa.user='ps uxf' # 当前用户的进程
alias l='ls -lFh' # ls -l 简写
alias lt='ls -lFh --sort=t' # ls -lFh --sort=t
alias la='ls -lFAh' # ls -a 简写
alias ll='ls -Fh' # ls -Fh
alias lla='ls -FAh' # ls -A
alias ..='cd ..' # cd .. 简写
alias ...='cd ../../' # cd ../../
alias kdu='du -sh' # du -sh 
alias le='less -R' # less -R
alias les='less -R -S'
alias len='less -N -R' # less -N -R
alias lens='less -N -R -S ' # less -N -R -S
alias C='clear' # clear
alias mpp='mkdir -p'
alias kip='nc -v -z -n' # 指定 ip port 是否开放
alias kport='nmap -sT ' # namp -sT 
alias his='history | less'
alias sudo='sudo ' #sudo别名,方便运行别名

alias hh='htop' # htop
alias gal='gradle' # gradle
alias gy='groovy' # groovy简写
alias py='python3' # python3 简写
alias py2='python2' # python2 简写

# 多参数简化
alias fut='fuser -v -n tcp' # fuser 查询tcp端口
alias fuu='fuser -v -n udp' # fuser udp
alias dsort='sort -hr' # 反序
alias now='date "+%F %T %A"' # 当前日期时间 date "+%F %T %A"
alias now.deserialize='date --date=@\'
alias now.seconds='date +%s'
alias nowF='date "+%F_%T"' # 用于命令行
alias now.cp='date "+%F %T" | xargs printf "%s %s\n" | xclip -sel clip' # 复制当前日期时间
alias now.dt='date +%Y%m%d' # 年月日

alias lfil='ls -lR|grep "^-"|wc -l' #统计文件夹下文件个数
alias ldil='ls -lR|grep "^d"|wc -l' #统计文件夹下文件夹个数
alias kdu.sort='du -h | dsort | less' # 按文件占用大小排序
alias kdu.isort='du -h --exclude .git --exclude .svn | dsort | less' # 忽略.git文件
alias kdu.head='du -hx * | dsort | head -n 40 | le' # 获取当前目录最大的目录或文件
alias krep='echo "USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND" && ps aux | egrep -v "grep" | grep -i' # 查询进程
alias ksum.me='grep -v grep | awk "{sum+=\$6};END {print sum \"K \" sum/1024\"M \"}"' # 与 krep 组合 示例: krep java | ksum.me
alias kstat='ps aux | grep -v RSS | awk "{print \$6 \"\\t\" \$6/1024\"M\" \"\\t\" \$2 \"\\t\" \$11 }" | dsort | less' # 按内存使用量对进程排序
alias trep='tree | grep -i' # tree | grep -i
alias fs='find . -iname' # find . -iname 

alias knet.stat='netstat -an|awk "/tcp/ {print \$6}"|sort -hr|uniq -c | sort -hr'

## 入参为管道的命令
alias kc.crlf='xargs sed -i "s/\r//g"' # crlf -> lf
alias kc.count='sort | uniq -c | sort -hr' # 去重累计排序
alias kc.sum='awk "{sum += \$1};END {print sum}"'


#############################################################
### 专有别名
#############################################################

alias kuang='cd com/github/kuangcp'

alias Kremove.apt='sudo apt remove --purge' # 完全卸载软件
alias Kremove.pacman='sudo pacman -Rs' # 完全卸载软件
alias https='http —default-scheme=https' # httpie 的https方式
alias k.todo='ag "\- \[ \] | TODO"' # find all todo 

alias tt='textadept' # textadept简写
alias ged='gedit' # gedit 简写
alias typ='typora' # typora 简写
alias fm='(dde-file-manager . &) >/dev/null 2>&1' # dde-file-manager
alias na='(nautilus . &) >/dev/null 2>&1' # nautilus
alias dol='(dolphin . &) >/dev/null 2>&1' # dolphin
alias thu='(thunar . &) >/dev/null 2>&1' # thunar
alias wcola='(cola &) >/dev/null 2>&1 ' # cola
alias aol='(qgit &) >/dev/null 2>&1' # qgit
alias ao='wcola' # cola
alias ai='(GitAhead &) >/dev/null 2>&1'
alias dcola='(git-dag &) >/dev/null 2>&1' # git-dag
alias Krec='asciinema rec' # 开始录制终端
alias ngr='sudo nginx -s reload'
alias jvm='(visualvm&)'

alias t='tmux'
alias ta='tmux a -t' # tmux a -t 


# sudo echo 不起作用, 只能在root下执行
alias kcache.page='sync  && echo 1 > /proc/sys/vm/drop_caches'
alias kcache.inode='sync && echo 2 > /proc/sys/vm/drop_caches'
alias kcache.slab='sync  && echo 3 > /proc/sys/vm/drop_caches'

## 服务
alias S.net='sudo /etc/init.d/networking restart' # 网络重启

## Java
alias ja='java -jar' # java -jar
alias java.dir='mkdir -p src/main/java; mkdir -p src/test/java; mkdir -p src/main/resources; mkdir -p src/test/resources' # 项目根目录下创建好目录结构
alias java.package='mkdir -p src/main/java/com/github/kuangcp' # 创建Maven项目包结构
alias java.dump='jmap -dump:live,format=b,file=heapLive.hprof' # dump a java process
alias kj='bash $SCRIPT/shell/assistant/java-tool.sh' # java tool

alias mvn.cd='mvn clean deploy -U'
alias mvn.cp='mvn clean package -U'
alias mvn.cc='mvn clean compile -U'
alias mvn.ci='mvn clean install -U'
alias mvn.c='mvn clean'
alias mvn.version.replace='__mvnrelease(){gls | grep pom | xargs sed -i "s/$1/$2/1"};__mvnrelease' # 更改版本号 
alias mvn.version.release='__mvnrelease(){ case $1 in *-SNAPSHOT)  version=${1%-SNAPSHOT*}"-RELEASE"; ;; *-RELEASE) version=${1%-RELEASE*}"-SNAPSHOT"; ;; esac; if test -n "$version";then echo $version; gls | grep pom | xargs sed -i "s/$1/$version/1"; fi; };__mvnrelease' # 更改版本号为 RELEASE

alias gal.cb='gal clean build -x test'

#############

# Color 
alias color_red='\033[0;31m' # red
alias color_green='\033[0;32m' # green 
alias color_yellow='\033[0;33m' # yellow
alias color_blue='\033[0;34m' # blue
alias color_purple='\033[0;35m' # purple
alias color_cyan='\033[0;36m' # cyan
alias color_white='\033[0;37m' # white   
alias color_default='\033[0m' # default

# Docker
alias da='docker attach' # docker attach Ctrl p q 才能不影响容器退出
alias dt='docker tag' # docker tag
alias dl='docker pull' # docker pull
alias dp='docker ps --format "table {{.ID}}  {{.Names}}\t{{.Image}}\t{{.RunningFor}}\t{{.Command}}\t{{.Status}}"'
alias dps='docker ps -a --format "table {{.ID}}  {{.Names}}\t{{.Image}}\t{{.CreatedAt}}\t{{.Command}}\t{{.Status}}"' # format docker ps
alias dpp='docker ps -a --format "table {{.ID}}  {{.Names}}\t{{.Size}}\t{{.Mounts}}\t{{.Ports}}"' # port and size 
alias drm='docker rm' # docker rm 
alias drmf='docer rm -f ' # docker rm -f
alias drmi='docker rmi ' # docker rmi
alias dim='docker images' # docker images
alias dstat='docker stats' # docker stats
alias dstatn='docker stats --no-stream' # docker stat --no-stream
alias don='docker start' # docker start
alias doni='docker start -i' # 交互式启动
alias dres='docker restart' # docker restart
alias doff='docker stop' # docker stop
alias dexec='docker exec -it' # docker exec -it
alias dport='docker port' # docker port

## docker-compose
alias dco='docker-compose'
alias dco.up='dco up'
alias dco.down='dco down'
alias dco.on='dco start'
alias dco.off='dco stop'
alias dco.res='dco stop && dco start'

# 问题
alias P.bell='sudo rmmod pcspkr' # 临时关闭终端响铃 或者 xset -b
alias P.fcitx='fcitx-autostart &' # 先把fcitx杀掉,然后跑这个,或者直接跑这个
alias P.gradle='gradle --stop' # 杀掉Gadle守护进程
alias P.swap='sudo swapoff -a && sudo swapon -a' # 重置交换分区
alias P.time='sudo /usr/sbin/ntpdate -u cn.pool.ntp.org' # 同步时间
alias P.deepin.wm='(killall deepin-wm-switcher; deepin-wm --replace &)' # 重启桌面管理器
alias P.xfce.wm='killall xfwm4'
alias P.docker='sudo groupadd docker; sudo gpasswd -a $USER docker' # 当前用户添加到Docker用户组

# Media
alias M.audio='__Maudio(){ if test -z "$*"; then echo 222; else for i in $*; do ffmpeg -i $i -vn -y -acodec copy ${i%\.*}.m4a; done; fi }; __Maudio'

#############################
# Git 
#############################

## add 
alias ga='git add -A && git status' # git add -A && git status
alias gaf='git add' # git add
alias gau='git add -u' # 只添加修改的文件
alias gad.add='gs -s | grep "^??" | awk "{print \$2}"  | xargs git add' # 只添加新增的文件

## clone 
alias gcl='git clone --depth 1' # git clone --depth 1
alias gcls='git clone' # git clone
alias gclr='git clone --recursive' # clone with submodules

alias gr='git reset' # git reset 
alias gr.lc='git reset --soft HEAD^' # git reset --soft HEAD^ 撤销上次提交

alias grm='git remote' # git remote
alias gv='git remote -v' # git remote -v
alias glm='git ls-remote' # git ls-remote
alias glm.b='glm  | cut -f 2 |sort -nr | le' # 分支排序

alias gs='git status' # git status 
alias gs.in='git status -s | grep -e "^[MADRC]" | xargs printf "%s\n" |  grep -e "^[^MADRC]"'
alias gt='git tag' # git tag
alias glg='git log --stat'
alias glgp='git log --stat -p'
alias glols='git log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --stat'

alias gb='git branch' # git branch
alias gbvv='git branch -vv' # git branch -vv
alias gbd='git branch -d'
alias gbD='git branch -D'
alias gbD.regex='__gbDregex(){ count=$(git branch | grep -E "$1" | wc -l); if test $count -gt 0; then git branch | grep -E "$1"; printf "  delete following branch (y/n): "; read answer; if test $answer = "y"; then git branch | grep -E "$1" | xargs git branch -D; fi; else echo "not match any branch." ; fi; }; __gbDregex'
alias gb.c='gb --show-current'

## config 
alias gcf='git config'
alias gcfl='git config --list'
alias gcfll='git config --local --list'

## submodule
alias gsb='git submodule'
alias gsb.init='git submodule update --init --recursive'

## commit 
alias gm='git commit -m' # git commit -m
alias gml='git commit -c ORIG_HEAD' # 使用上次提交(包括被reset)的信息进行提交
alias gam='git commit -am' # git commit -am
alias gmv='git commit -v' # git commit -v  查看更改,输入提交信息

alias gme='git merge --no-ff ' # git merge --no-ff 简写
alias gme.branches='__gmebranches(){ if test "$1" = "h"; then echo "  Usage: gme.branches branch pattern | merge branch to all branch that match pattern"; fi;  if test $# = 2; then for branch in $(gb | grep -e "$2" ); do gh $branch && git merge --no-ff $1 && gp && ghl; done; fi}; __gmebranches'
alias gmr='git rebase -i'

alias gp='git push' # git push
alias gpt='git push --tags'
alias gpal='git push --all' # git push --all
alias gpoc='__gpoc(){ remote="origin"; if test -n "$1"; then remote=$1; fi ; git push -u $remote $(gb.c); }; __gpoc' # git push -u $remote currentBranch
alias gpob=' __gpob(){ remote="origin"; if test -n "$1"; then remote=$1; fi ; git remote set-branches $remote $(gb.c);  git fetch; }; __gpob' # 设置远程 track 本地分支
alias gpoa='gpoc && gpob'
alias gpd='__gpd(){ if test $# = 2; then git push $1 --delete $2; fi; }; __gpd' # 删除远程分支 gpd origin fea/test
alias gpdt='__gpdt(){ if test $# = 2; then git push $1 --delete tag $2; fi; }; __gpdt' # 删除远程标签 gpdt origin v1.0

alias gl='git pull' # git pull 
alias gd='git diff' # git diff
alias gds='gd --compact-summary'
alias gdc='git diff --cached' # git diff --cached
alias gdcs='gdc --compact-summary'
alias gd.patch='__gdpatch(){git diff > $1.patch};__gdpatch' # create patch

alias gh='git checkout' # git checkout
alias ghl='git checkout -' # git checkout - 
alias ghb='git checkout -b' # git checkout -b

alias gls='git ls-files' # git ls-files
alias gline='git ls-files | xargs cat | wc -l' # 查看仓库中所有文本文件行数总和

alias gcount='git log   --author="$(git config --get user.name)" --pretty=tformat: --numstat | awk "{a+=\$1; b+=\$2; c+=\$1-\$2}; END {printf \"add: %s remove: %s total: %s\n\", a ,b ,c }"' # 统计更改行数

alias glo='git log --oneline --decorate' # 最简单
alias glog='git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=format:"%F %T"' # glog format own define
alias glogl='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%F %T"' # glog format own define
alias glogc="git log --graph --pretty=format:'%Cred%h%Creset %Cgreen%ad%Creset%C(yellow)%d%Creset %C(bold cyan)%an%Creset %s' --abbrev-commit --date=format:'%F %T %a'" # 彩色输出
alias gsw='git show'
alias gswb='git show-branch'

alias gco.add='printf "add line:"; gdc | grep -E "^\+{1}[^+]"|wc -l'
alias gco.del='printf "del line:"; gdc | grep -E "^-{1}[^-]"|wc -l'

alias gls.author='gls | grep \\.java  | xargs cat | grep "uthor " | kc.count' # java author
alias gls.large.commit='git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -40 | awk "{print\$1}"'
alias gls.large='git rev-list --objects --all | grep "$(gls.large.commit)"'

## 统计 git log 
alias glogt='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%H %M %S" | awk "{print \$2}" | kc.count'
alias glogtm='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%H %M %S" | awk "{print \$2 \$3}" | kc.count'
alias glogttm='git log --pretty=format:"%h %ad | %s%d [%an]" --date=format:"%H %M %S" | awk "{print \$2 \$3}" | colrm 4 | kc.count'
alias glogm='git log --pretty=format:"%h %ad | %s%d " --date=format:"%F %T" | grep -v origin | grep -v Merge | awk "{print \$5\" \"\$6\" \"\$7\" \"\$8\" \"\$9}" | kc.count | less'
alias glogau='git log --pretty=format:"%an" | kc.count' # 统计提交作者

## zsh 中 git 插件已包含
## alias gloga='git log --oneline --decorate --graph --all' # 简短彩色输出
## alias glol='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'
## alias glola='git log --graph --pretty='\''%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\'' --all'

## stash 
alias gsh='git stash' # git stash 
alias gshl='git stash list' # git stash list
alias gshk='git stash --keep-index' # stash 所有文件的修改 不包含文件的新增，但是保留index区文件状态
alias gsh.nk='git stash --no-keep-index' # stash 所有 文件的修改 
alias gsh.nku='git stash --no-keep-index -u' # stash 所有 文件的修改 和 文件的新增(untrack)
alias gsh.all=gsh.nku
alias gsh.in='__gshin(){ index_count=$(gs.in | wc -l); if test -n $index_count; then gs.in | xargs git stash push;  fi }; __gshin' # stash index 区内容
alias gshu='git stash -u' # git stash  -u 
alias gshb='git stash branch' # git stash branch
alias gshd='git stash drop' # git stash drop 
alias gshp='git stash pop' # git stash pop 
alias gsha='git stash apply' # git stash apply
alias gshh='git stash push' # git stash list
alias gshs='git stash show' # git stash show
alias gsh.st='__gshst(){ index=$1; if test -z $index; then index=0; fi; git stash show -p stash@{$index} }; __gshst' # show 指定 stash index 的内容
alias gsh.cla='__gshclA(){ before=$(wip|wc -l); git stash --no-keep-index -u; after=$(wip|wc -l); if test $after -gt $before; then gshd; fi; }; __gshclA' # 删除当前所有更改 gsh.cover 进行恢复
alias gsh.cl='__gshcl(){ before=$(wip|wc -l); git stash --no-keep-index; after=$(wip|wc -l); if test $after -gt $before; then gshd; fi; }; __gshcl' # 删除当前所有更改 不包含未track文件比如新增文件 gsh.cover 进行恢复
alias gsh.ce='__gshce(){ count=$(gss | grep -E "$1" | wc -l); if test -z $count ; then return 0; else git status -s | grep -E "$1" | awk "{print \$2}" | xargs git stash push; fi}; __gshce' # stash 输入的 regex 匹配上的文件
alias wip='git stash list | grep $(gb.c)' #  查看当前分支是否有 stash 存在
alias gsh.cover='gitk --all $( git fsck --no-reflog | awk "/dangling commit/ {print \$3}" )'

## cherry pick
alias gcp='git cherry-pick'
alias gcpa='git cherry-pick --abort'
alias gcpc='git cherry-pick --continue'

###########################
# SVN
###########################

alias saf='svn add * --force' # 强制添加所有文件
alias sa='svn add' # svn add 
# alias sc='svn ci -m' # svn 提交, 不能就这样暴力提交
alias sp='svn up' # 下拉代码
## alias st='svn diff --diff-cmd "diff" -x "-q" . | grep Index | cut -d " " -f 2' # 类比 git status -s
alias slog='svn log | less' # 查看日志
alias st='svn st' # git status类似
alias scon='st | egrep "^C"' # 冲突
alias sr='svn revert' # 恢复
alias sres='svn resolved' # 
alias sfo='svn info' # svn info
alias sdf='svn diff' # svn diff
alias scc='svn st | grep -E "^(C)|(D\s*C)"' # 查看冲突文件

################################################################
# Script 
# SCRIPT 环境变量定义在 custom 中

alias kg='dash $SCRIPT/shell/repository-tool.sh' # 检查所有仓库状态 Shell 实现并通过读取自定义aliases文件

alias Kcsdn='py $SCRIPT/python/increase_readed.py' # increase 

alias kc='sh $SCRIPT/shell/assistant/cpp.sh' # 编译运行C文件辅助脚本
alias kpy.test='sh $SCRIPT/shell/assistant/python_unittest.sh' # 运行py单元测试辅助脚本

alias kcount='py $SCRIPT/python/tool/doc/count_char_zh.py' # 统计中文

alias kdd='dash $SCRIPT/shell/text/deal_md.sh' # 处理MarkDown文件
alias kdd.py='py $SCRIPT/shell/text/refresh_catalog.py' # refresh catalog
alias Kdesktop='dash $SCRIPT/shell/text/deal_desktop.sh' # 创建一个desktop文件

alias kfs='bash $SCRIPT/shell/base/process-tool.sh' # 进程工具
alias kfsm='kfs -ms /Java /Vscode /Firefox /Chrome /Chromium'

alias kf='sh $SCRIPT/shell/base/file-tool.sh' # 文件路径工具
alias kfe='kf e' # 解压文件
alias kf.java='kf f \.java | xargs cat | wc -l' # 统计 java 行数

alias kd='sh $SCRIPT/shell/base/docker-tool.sh' # Docker工具

alias krm='bash $SCRIPT/shell/base/recycle-bin.sh' # 回收站工具 bash
alias kh='bash $SCRIPT/shell/sdk/mythsdk.sh' # sdk工具
alias K.h='bash $SCRIPT/shell/base/show_alias_help.sh' # alias展示
alias krd='bash $SCRIPT/shell/text/refresh_index.sh' # 读md
alias Kproto='bash $SCRIPT/shell/text/read_protoc.sh' # protoc
alias \?='sh $SCRIPT/shell/base/ShowReadme.sh' # readme 查看

alias km.ts='bash $SCRIPT/shell/media/mergets.sh'
alias km.tsl='ts_filename=$(date "+%Y%m%d-%H%M%S"); for file in $(ls | grep -v m3u8| sort -h); do echo $file; cat $file >> $ts_filename.mp4;done'


## Work
alias Kpu='bash $SCRIPT/shell/deploy/deploy_file_by_pass.sh' # 发布war
alias Kpu.conf='tt $SCRIPT/shell/deploy/server.conf' # 配置文件

alias kw.branch='bash $SCRIPT/shell/work/git-tool.sh' # 创建分支
alias kw.server='bash $SCRIPT/shell/work/check-web-server.sh' # 检查服务器状态
alias kw.kafka='bash $SCRIPT/shell/work/watch-kafka-topic.sh' # 检查 Topic 状态
alias kw.kafka.consumer='bash $SCRIPT/shell/work/watch-kafka-consumer.sh' # 检查 Topic 状态
alias kw.branch='bash $SCRIPT/shell/work/git-tool.sh'


## Python
alias kee='sh $SCRIPT/python/tool/key/anaiysis.sh' # 分析按键
alias kee.key='kee -d | sort| awk "{print \$2};" | egrep "^[A-Z]{1,1}$" | xargs echo | less' # 按顺序列出按键
alias kee.key.small='kee.key | xargs printf "\033[0;32m%s\033[0;0m"' # 缩略
alias krecord='sh $SCRIPT/python/tool/key/record.sh' # 记录脚本
alias kdns='py $SCRIPT/python/tool/switch-host-group/app.py' # 切换 hosts group

alias kmaven.dp='py $SCRIPT/python/java/maven/analysis_dependency.py' # 分析 Maven 依赖 提示可能的冲突

